library(maps)
library(mapdata)
library(mapproj)

## plot & extract coordinates from orthographic map
par(mar = c(1,1,1,1))
xy <- map("world", proj = "orthographic", orientation = c(20,40,0), 
          xlim = c(35, 45), ylim = c(12, 25), resolution = 0)




######################################################################

library(ggplot2)
library(gganimate)
theme_set(theme_bw()+ theme(panel.grid = element_blank())) # fix ggplot theme with no gridlines on plot
gif <- ggplot() +
  geom_polygon(data = map_data('world2'), aes(x = long, y = lat, group = group), # country outlines from the maps package
               fill = 'white', color = 'black', size =.1) +
  geom_tile(data = anom.training, # colored tiles, includes data for each pressure I want
            aes(x = long, y = lat, fill = length, color = length)) +
  coord_map("ortho", orientation = c(-85/5, 70, 0), #indian ocean # the parameters are odd - test it out
            xlim = c(40, 120), ylim  = c(-40,20)) + 
  scale_fill_gradient2(high = 'red') +
  scale_color_gradient2(high = 'red') +
  labs(title = 'Pressure: {frame_time}, Gradient in Space', # the value in bracket will change for each animation
       subtitle = 'In mid-February',
       x = 'Longitude', y = 'Latitude',
       color = 'Gradient\nLength\n(degrees\nCelcius/km)',
       fill = 'Gradient\nLength\n(degrees\nCelcius/km)') +
  transition_time(pressure) + # this says to animate by pressure (continuous variable)
  ease_aes('linear') # If there is no data in pressure where a frame is made, it will linearly interpolate the predictions
a <- proc.time()
anim_save("space_gif_indian_ocean.gif", 
          animate(gif, nframes = 201, fps = 10, height = 800, width =1248, # 201 frames because I use 201 different pressure values
                  renderer= magick_renderer() # there are a few different renderers
          ))
b <- proc.time()
b-a